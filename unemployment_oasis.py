# -*- coding: utf-8 -*-
"""Unemployment_Oasis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ek7E2_w1a8_XUG5_jV4Dx-gTLCgVwyv4
"""

#Importing necessary libraries
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

import warnings

# Ignore all warnings
warnings.filterwarnings("ignore")

#Importing and Reading the Unemployment in India dataset
df = pd.read_csv("/content/Unemployment in India.csv")
df.head(5)

df.info()

#Printing the shape of the dataset
df.shape

df.describe()

# Check for duplicate rows
duplicates = df.duplicated()
sum_duplicates = duplicates.sum()
print(f"Number of duplicate rows: {sum_duplicates}")

duplicate_rows = df[duplicates]
print("\nDuplicate Rows:")
print(duplicate_rows)

df.drop_duplicates(inplace=True)

#Checking for null values
null_values = df.isnull()
null_counts = null_values.sum()

print("Null Value Counts:")
print(null_counts)

#Dropping the null values
df = df.dropna()

df

#Printing the columns of the dataset
print(df.columns)

df.rename(columns={' Date': 'Date', ' Frequency': 'Frequency', ' Estimated Unemployment Rate (%)': 'Estimated Unemployment Rate (%)'}, inplace=True)

df.rename(columns={' Estimated Employed': 'Estimated Employed', ' Estimated Labour Participation Rate (%)': 'Estimated Labour Participation Rate (%)'}, inplace=True)

#Counting the number of records in each region of the dataset
df.Region.value_counts()

df['Date'] = pd.to_datetime(df['Date'],dayfirst = True)
df.info()

df.head()

#Printing the month number corresponding to each date
df['Month_int'] = df['Date'].dt.month
df.head()

#Displaying the month
import calendar

df['Month'] = df['Month_int'].apply(lambda x: calendar.month_abbr[x])
df.head()

#Plotting Estimated Unemployment Rate (%) corresponding to each region
plt.title("Indian Unemployment")
sns.histplot(x="Estimated Unemployment Rate (%)", hue="Region", data=df)
plt.show()

#Plotting Estimated Employed corresponding to each region
plt.title("Indian Unemployment")
sns.histplot(x="Estimated Employed", hue="Region", data=df)
plt.show()

#Plotting Estimated Labour Participation Rate (%) corresponding to each region
plt.title("Indian Unemployment")
sns.histplot(x="Estimated Labour Participation Rate (%)", hue="Region", data=df)
plt.show()

#Encoding the Frequency feature
from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()
df['Frequency']=label.fit_transform(df['Frequency'])

#Encoding the Area faeture
from sklearn.preprocessing import LabelEncoder
label=LabelEncoder()
df['Area']=label.fit_transform(df['Area'])

df

#Showing the correlation matrix between all the numeric features
plt.figure(figsize = (8,5))
sns.heatmap(df.corr() , annot = True , cmap = "YlGnBu")

#Creating box-plots
plt.figure(figsize=(14, 6), dpi=80)

plt.subplot(221)
sns.boxplot(df['Estimated Unemployment Rate (%)'])

plt.subplot(222)
sns.boxplot(df['Estimated Employed'])

plt.subplot(223)
sns.boxplot(df['Estimated Labour Participation Rate (%)'])

plt.show()

#Scatter matrix
plt.figure(figsize=(10, 5), dpi=80)
import plotly.express as px

fig = px.scatter_matrix(df, template='plotly',
                        dimensions=['Estimated Unemployment Rate (%)', 'Estimated Employed', 'Estimated Labour Participation Rate (%)'],
                        color='Region')
fig.show()

#Defining the start date of the lockdown period
lockdown_start = pd.to_datetime('2020-03-01')

#Creating a new column to indicate whether the date is before or after the lockdown
df['Lockdown'] = df['Date'] >= lockdown_start

#Grouping the dataframe by date and calculate the mean unemployment rate for each date
unemployment_by_date = df.groupby('Date')['Estimated Unemployment Rate (%)'].mean()

#Creating the line plot with a vertical line at the lockdown start date
fig, ax = plt.subplots(figsize=(6, 3))
unemployment_by_date.plot(ax=ax)
ax.axvline(lockdown_start, color='red', linestyle='--')
ax.set(title='Unemployment Rate over Time', xlabel='Date', ylabel='Unemployment Rate (%)')
plt.show()

#Grouping the dataframe by area and calculate the mean unemployment rate for each area
unemployment_by_region = df.groupby('Area')['Estimated Unemployment Rate (%)'].mean()

#Creating a bar chart of the mean unemployment rate for each region
fig, ax = plt.subplots(figsize=(6, 3))
unemployment_by_region.plot(kind='bar', ax=ax)
ax.set(title='Mean Unemployment Rate by Area', xlabel='Area', ylabel='Unemployment Rate (%)')
#Adding custom labels to the bars
labels = {0: 'Rural', 1: 'Urban'}
ax.set_xticklabels([labels[int(x.get_text())] for x in ax.get_xticklabels()])
plt.show()

#Creating a scatter plot of the relationship between the unemployment rate and the estimated labor participation rate
fig, ax = plt.subplots(figsize=(6, 3))
ax.scatter(df['Estimated Labour Participation Rate (%)'], df['Estimated Unemployment Rate (%)'])
ax.set(title='Unemployment Rate vs. Labor Participation Rate', xlabel='Labor Participation Rate (%)', ylabel='Unemployment Rate (%)')
plt.show()

#Plotting Sunburst chart showing unemployment rate in each area and region

unemplo_df = df[['Region', 'Area', 'Estimated Unemployment Rate (%)', 'Estimated Employed', 'Estimated Labour Participation Rate (%)']]
unemplo = unemplo_df.groupby(['Area', 'Region'])['Estimated Unemployment Rate (%)'].mean().reset_index()

#Mapping numeric labels to custom labels
labels = {0: 'Rural', 1: 'Urban'}
unemplo['Area_Label'] = unemplo['Area'].map(labels)

fig = px.sunburst(unemplo, path=['Area', 'Region'], values='Estimated Unemployment Rate (%)',
                  color_continuous_scale='Plasma', title='Unemployment rate in each area and region',
                  height=650, template='ggplot2')
hover_data={'Area_Label': True, 'Region': True, 'Estimated Unemployment Rate (%)': ':.2f'}

#Adding a legend or side box
legend_text = [{'x': 0, 'y': 0.9, 'text': '0: Rural', 'showarrow': False},
               {'x': 0, 'y': 0.85, 'text': '1: Urban', 'showarrow': False}]

fig.update_layout(annotations=legend_text)
fig.show()

#data representation before and after lockdown

before_lockdown = df[(df['Month_int']>=1) &(df['Month_int'] <4)]
after_lockdown = df[(df['Month_int'] >=4) & (df['Month_int'] <=6)]

af_lockdown = after_lockdown.groupby('Region')['Estimated Unemployment Rate (%)'].mean().reset_index()

lockdown = before_lockdown.groupby('Region')['Estimated Unemployment Rate (%)'].mean().reset_index()
lockdown['unemployment rate before lockdown (%)'] = af_lockdown['Estimated Unemployment Rate (%)']

lockdown.columns = ['Region','unemployment rate before lockdown','unemployment rate after lockdown']
lockdown.head()

#percentage change in unemployment rate

lockdown['percentage change in unemployment'] = round(lockdown['unemployment rate after lockdown'] - lockdown['unemployment rate before lockdown']/lockdown['unemployment rate before lockdown'],2)
plot = lockdown.sort_values('percentage change in unemployment')

print(plot)

#percentage change in unemployment after lockdown

fig = px.bar(plot, x='Region',y='percentage change in unemployment',color='percentage change in unemployment',
            title='percentage change in Unemployment in each state after lockdown',template='ggplot2')
fig.show()